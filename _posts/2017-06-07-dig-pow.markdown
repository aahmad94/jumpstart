---
layout: post
title: codewars playing with numbers
date: 2017-06-07 12:00:00
---
<h4><p>Given a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n. In other words:</p>

<p>Is there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k
<strong>If it is the case we will return k, if not return -1.</strong></p>

<p>Note: n, p will always be given as strictly positive integers</p></h4>

<p>My solution, after much troubleshooting</p>
{% highlight ruby %}
def dig_pow(n, p)
  sum = n.to_s.split('').map(&:to_i).map.with_index(p) { |num, idx| num ** idx }.reduce(:+)
  sum % n == 0 ? sum/n : -1
end
{% endhighlight %}

<p>These are the corresponding test cases that must pass as true:</p>
{% highlight ruby %}
dig_pow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1
dig_pow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k
dig_pow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2
dig_pow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51
{% endhighlight %}
